/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luiz Bataioli
 */
public class TelaCozinha extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaCozinha
     */
    public TelaCozinha() {
        initComponents();
        relogio();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblHoras = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPedidos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblExibirPedido = new javax.swing.JTable();
        btnConcluido = new javax.swing.JButton();
        btnEmPreparo = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblHoras.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblHoras.setText("00:00");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("OrderDesk");

        btnVoltar.setText("<--Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHoras)
                .addGap(242, 242, 242)
                .addComponent(btnVoltar)
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHoras)
                    .addComponent(jLabel2)
                    .addComponent(btnVoltar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        tblPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pedido", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPedidosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblPedidosMousePressed(evt);
            }
        });
        tblPedidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblPedidosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblPedidos);

        tblExibirPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Itens"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblExibirPedido);

        btnConcluido.setBackground(new java.awt.Color(153, 255, 51));
        btnConcluido.setText("CONCLUIDO");
        btnConcluido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcluidoActionPerformed(evt);
            }
        });

        btnEmPreparo.setBackground(new java.awt.Color(255, 51, 51));
        btnEmPreparo.setText("EM PREPARO");
        btnEmPreparo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmPreparoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnConcluido, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnEmPreparo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEmPreparo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConcluido, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try {
            exibirRegistros();
        } catch (SQLException ex) {
            Logger.getLogger(TelaCozinha.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void tblPedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPedidosMouseClicked

        try {
            exibirItens();
        } catch (SQLException ex) {
            Logger.getLogger(TelaCozinha.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblPedidosMouseClicked

    private void btnEmPreparoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmPreparoActionPerformed

        String emPreparo = "Em preparo";

        int selectedRow = tblPedidos.getSelectedRow();

        if (selectedRow != -1) {
            
            int id_pedido = (int) tblPedidos.getValueAt(selectedRow, 0);

            try {

                String sql = "UPDATE pedidos SET status_pedido = ? WHERE id = ?";
                Connection conexao = conectarBanco();

                PreparedStatement pstmt = conexao.prepareStatement(sql);

                pstmt.setString(1, emPreparo);
                pstmt.setInt(2, id_pedido);
                
                pstmt.executeUpdate();
                exibirRegistros();
                
                pstmt.close();
                conexao.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaCozinha.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Selecione um pedido para alterar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnEmPreparoActionPerformed

    private void tblPedidosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPedidosKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblPedidosKeyReleased

    private void tblPedidosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPedidosMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblPedidosMousePressed

    private void btnConcluidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcluidoActionPerformed
        String emPreparo = "Concluido";

        int selectedRow = tblPedidos.getSelectedRow();

        if (selectedRow != -1) {
            
            int id_pedido = (int) tblPedidos.getValueAt(selectedRow, 0);

            try {

                String sql = "UPDATE pedidos SET status_pedido = ? WHERE id = ?";
                Connection conexao = conectarBanco();

                PreparedStatement pstmt = conexao.prepareStatement(sql);

                pstmt.setString(1, emPreparo);
                pstmt.setInt(2, id_pedido);
                
                pstmt.executeUpdate();
                exibirRegistros();
                limparTabela();
                        
                pstmt.close();
                conexao.close();
                

            } catch (SQLException ex) {
                Logger.getLogger(TelaCozinha.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Selecione um pedido para alterar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnConcluidoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConcluido;
    private javax.swing.JButton btnEmPreparo;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblHoras;
    private javax.swing.JTable tblExibirPedido;
    private javax.swing.JTable tblPedidos;
    // End of variables declaration//GEN-END:variables

    public void relogio() {
        // Criando um Timer que atualiza o label a cada segundo (1000ms)
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtém a hora atual
                long currentTime = System.currentTimeMillis();
                // Formata a hora atual como uma string no formato HH:mm:ss
                String horaAtual = String.format("%tT", currentTime);
                // Define o texto do label como a hora atual
                lblHoras.setText(horaAtual);
//                try {
//                    exibirRegistros();
//                } catch (SQLException ex) {
//                    Logger.getLogger(TelaCozinha.class.getName()).log(Level.SEVERE, null, ex);
//                }

            }
        });

        // Inicia o timer
        timer.start();

        // Configuração do label
        lblHoras.setFont(new Font("Arial", Font.BOLD, 20)); // Define uma fonte grande para o label
        lblHoras.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o texto do label

    }

    private void exibirRegistros() throws SQLException {

        try {
            Connection conexao = conectarBanco();

            String sql = "Select Id, status_pedido From pedidos WHERE status_pedido <> 'Concluido'";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            ResultSet rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblPedidos.getModel();
            model.setRowCount(0);

            while (rs.next()) {

                int id = rs.getInt("id");
                String statusPedido = rs.getString("status_pedido");

                model.addRow(new Object[]{id, statusPedido});

            }

            rs.close();
            pstmt.close();
        } catch (SQLException ex) {
            // Lidar com erros de banco de dados
            JOptionPane.showMessageDialog(this, "Erro ao buscar registros: " + ex.getMessage());
        }

    }

    private Connection conectarBanco() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/OrderDesk";
        String usuario = "root";
        String senha = "1234";
        return DriverManager.getConnection(url, usuario, senha);
    }

    private void exibirItens() throws SQLException {

        int selectedRow = tblPedidos.getSelectedRow();
        if (selectedRow != -1) {
            int id_pedido = (int) tblPedidos.getValueAt(selectedRow, 0);

            Connection conexao = conectarBanco();

            String sql = "SELECT pedidos.id, pedidos_itens.id_produto, produtos.nome FROM pedidos LEFT JOIN pedidos_itens ON pedidos.id = pedidos_itens.id_pedido LEFT JOIN produtos ON pedidos_itens.id_produto = produtos.id WHERE pedidos.id = ?";

            PreparedStatement pstmt = conexao.prepareStatement(sql);
            pstmt.setInt(1, id_pedido);

            ResultSet rs = pstmt.executeQuery();

            DefaultTableModel modelExibir = (DefaultTableModel) tblExibirPedido.getModel();
            modelExibir.setRowCount(0);

            while (rs.next()) {

                String itemPedido = rs.getString("nome");

                modelExibir.addRow(new Object[]{itemPedido});

            }
            rs.close();
            pstmt.close();
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao buscar registros", "Aviso", JOptionPane.WARNING_MESSAGE);
        }

    }
    
    private void limparTabela(){
        DefaultTableModel model = (DefaultTableModel) tblExibirPedido.getModel();
            model.setRowCount(0);
    }

}
